Intro to Algorithms with Scheme -- Author Notes
Rich Loveland
r@rmloveland.com

The following are my writing notes for the book `Intro to Algorithms
with Scheme'. It's my intent that they will turn into a working
outline over time.

* 00 - Introduction

Testing library.

Utilities library.

Discussion of type annotations and return values in procedure
definitions -- practical, not academic. Facilitates skim-reading code.

Building a tags file for source navigation.

Edwin basics.

The `pp' procedure.

The `show-parameter-list' procedure (M-Shift-A).

The `scheme-complete-variable' procedure (ESC-TAB).

The debugger.

* 01 - Searching

Binary search.

* 02 - Sorting

Merge sort.

* 03 - Trees

Binary trees.

CSRMs: constructors, selectors, recognizers, and mutators.

Basic operations

- creation
- insertion
- updating (destructive/in-place)
- deletion

Walking the tree using higher order functions (see notes from ADuni lectures).

Sorting with treesort.

This is only fast if the tree is balanced, so give the ``slow
version'' first, since balanced trees are not introduced yet. Explain
why it can be slow.

Balanced binary trees.

Red-black tree or AVL tree? AVL is supposedly simpler to implement but
red-black is said to have superior tree rotation runtime -- once we
have a self-balancing tree of either type we can write the ``fast''
treesort!

* 04 - Graphs

Introduction to graphs.

How to represent graphs with another data structure -- matrix or hash
table. We might want to implement our own hash tables first using
balanced binary trees -- this would be way cool!

In other words, it might be cool to build everything from the bottom
up, e.g.:

1. Balanced binary tree
2. Hash Table
3. Graph (using hash table representation)

Discussion of common graph algorithms.

Traversal: TBD.

Search: Dijkstra's Algorithm.
